<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Minimum Viable Blog</title>
    <link>http://isaaclyman.com/blog/categories/development/</link>
    <description>Recent content in Development on Minimum Viable Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>map[host:isaaclyman.com username:blog] (Isaac Lyman)</managingEditor>
    <webMaster>map[host:isaaclyman.com username:blog] (Isaac Lyman)</webMaster>
    <copyright>© 2017 by Isaac Lyman. Site powered by Hugo and GitHub Pages.</copyright>
    <lastBuildDate>Mon, 21 Apr 2025 20:34:21 -0600</lastBuildDate>
    <atom:link href="http://isaaclyman.com/blog/categories/development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Laws for software engineers</title>
      <link>http://isaaclyman.com/blog/posts/laws/</link>
      <pubDate>Mon, 21 Apr 2025 20:34:21 -0600</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/laws/</guid>
      <description>The following laws have been valuable to me over the course of my career.&#xA;Brooks&amp;rsquo;s Law (adding developers to a project) Cargill&amp;rsquo;s Law / The Ninety-Ninety Rule (last 10 percent is the hardest) Chesterton&amp;rsquo;s Fence (ripping things out before you understand them) Conway&amp;rsquo;s Law (systems tend to mirror org charts) Cunningham&amp;rsquo;s Law (the unreasonable effectiveness of wrong answers) Eagleson&amp;rsquo;s Law (the limits of code authorship) Gall&amp;rsquo;s Law (complex systems must evolve from simple systems) Goodhart&amp;rsquo;s Law (measures becoming targets) Hanlon&amp;rsquo;s Razor (assume stupidity rather than malice) Hofstadter&amp;rsquo;s Law (it takes longer than you expect) Parkinson&amp;rsquo;s Law (work expands to fill time) POSIWID (systems do what they&amp;rsquo;re supposed to) Postel&amp;rsquo;s Law / The Robustness Principle (be consistent, expect inconsistency) Zawinski&amp;rsquo;s Law (programs tend to expand) Brooks&amp;rsquo;s Law (adding developers to a project) Adding manpower to a late software project makes it later.</description>
    </item>
    <item>
      <title>Rust borrowing</title>
      <link>http://isaaclyman.com/blog/posts/rust-borrowing/</link>
      <pubDate>Fri, 13 Dec 2024 19:27:41 -0700</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/rust-borrowing/</guid>
      <description>Record scratch. Freeze frame. You&amp;rsquo;re writing a function. What are you thinking about?&#xA;If you&amp;rsquo;re using a mainstream, high-level, memory-managed language like C#, Python, Java, or JavaScript, you&amp;rsquo;re thinking about:&#xA;The parameters Their types What the function will do with the information they contain The return value Its type Which are good and reasonable things to think about, and most of the time, for most things, they&amp;rsquo;re all you should think about.</description>
    </item>
    <item>
      <title>Solving the CIA Kryptos code in TypeScript (Part 4)</title>
      <link>http://isaaclyman.com/blog/posts/kryptos-4/</link>
      <pubDate>Fri, 26 Jan 2024 09:20:46 -0700</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/kryptos-4/</guid>
      <description>You can find all the code for this series on GitHub.&#xA;Kryptos 4 is, I repeat, unsolved. We&amp;rsquo;re very unlikely to solve it today. Enthusiastic codebreakers have been putting together clues and proposing theories for decades. At least half of them are like this:&#xA;But hey, since we&amp;rsquo;ve got some code ready to go, we might as well try.&#xA;Setup All the code we&amp;rsquo;ve written so far is available on GitHub.</description>
    </item>
    <item>
      <title>Solving the CIA Kryptos code in TypeScript (Part 3)</title>
      <link>http://isaaclyman.com/blog/posts/kryptos-3/</link>
      <pubDate>Fri, 26 Jan 2024 09:15:46 -0700</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/kryptos-3/</guid>
      <description>You can find all the code for this series on GitHub.&#xA;Kryptos 3 is going to require more code than anything else so far. It&amp;rsquo;s encoded using both the types of transposition we covered in Part 2, plus a twist.&#xA;It&amp;rsquo;s written out with a rectangle size of 86 and a block size of 7. The columns are stacked. A keyed columnar cipher is applied with the key &amp;lsquo;KRYPTOS&amp;rsquo;. (KRYPTOS is seven characters long, which is why our block size is 7.</description>
    </item>
    <item>
      <title>Solving the CIA Kryptos code in TypeScript (Part 2)</title>
      <link>http://isaaclyman.com/blog/posts/kryptos-2/</link>
      <pubDate>Fri, 26 Jan 2024 09:11:46 -0700</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/kryptos-2/</guid>
      <description>You can find all the code for this series on GitHub.&#xA;In the previous post we solved Kryptos 1 and 2. Kryptos 3 is going to be a bit tougher. It doesn&amp;rsquo;t use our trusty Vigenere cipher. And it doesn&amp;rsquo;t use just one cipher, either; it uses two. We&amp;rsquo;ll learn them separately in this post, then use them together in the next one.&#xA;Keyed columnar transposition We need to learn a transposition cipher, which is where the letters in a message are rearranged but not changed.</description>
    </item>
    <item>
      <title>Solving the CIA Kryptos code in TypeScript (Part 1)</title>
      <link>http://isaaclyman.com/blog/posts/kryptos-1/</link>
      <pubDate>Fri, 26 Jan 2024 09:05:46 -0700</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/kryptos-1/</guid>
      <description>You can find all the code for this series on GitHub.&#xA;On the campus of CIA headquarters in Virginia, United States, there&amp;rsquo;s a 34-year-old sculpture called Kryptos. It somewhat resembles a heavy copper flag waving in the wind. Cut out of its surface are 1,736 uppercase ASCII characters split into four encrypted messages and a Vigenere cipher table.&#xA;The first three messages were decrypted in the 1990s, first by the NSA and CIA, who didn&amp;rsquo;t publicize their success, and then by a private-sector computer scientist, who did.</description>
    </item>
    <item>
      <title>The 3D object model of software construction</title>
      <link>http://isaaclyman.com/blog/posts/3d-object-model-of-software/</link>
      <pubDate>Mon, 20 Nov 2023 11:00:28 -0700</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/3d-object-model-of-software/</guid>
      <description>Software projects are most efficient when, at any given time, each contributor is focused on a different concern. Like objects in 3D space, projects can be said to have surface area and volume:&#xA;Surface area represents the number of opportunities to contribute—that is, how many people could efficiently work on the project at the same time. Volume represents the knowledge space of the project (measured, perhaps, in the total number of productive person-hours spent on it).</description>
    </item>
    <item>
      <title>Have we reached Peak Programming Languages?</title>
      <link>http://isaaclyman.com/blog/posts/peak-programming-languages/</link>
      <pubDate>Wed, 19 Apr 2023 11:04:02 -0600</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/peak-programming-languages/</guid>
      <description>I’m relatively young on the programming scene (I wasn&amp;rsquo;t around when FORTRAN came out or anything) so this is a hubristic thing to say, but it feels like we’ve reached Peak Programming Languages. For anything you want to build and any way you want to build it, there&amp;rsquo;s a mature and popular language already available. Typically the community around it is robust and the syntax is delightful. I mean, just try writing a few lines of C# or Dart and tell me it doesn&amp;rsquo;t feel nice.</description>
    </item>
    <item>
      <title>Credit card chips and encryption in plain JavaScript</title>
      <link>http://isaaclyman.com/blog/posts/credit-card-microchip/</link>
      <pubDate>Tue, 25 Oct 2022 12:23:02 -0600</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/credit-card-microchip/</guid>
      <description>Your current credit card can be used in four different ways:&#xA;Typing in the card number. We&amp;rsquo;ve been using credit cards this way since 1950. Sliding the card&amp;rsquo;s magnetic strip (the black stripe) through a card reader. This method was invented by IBM in the 1960s and has been in use ever since, but it&amp;rsquo;s on its way out. In a few short years many credit cards will no longer have a magnetic strip.</description>
    </item>
    <item>
      <title>Is code a performative speech act?</title>
      <link>http://isaaclyman.com/blog/posts/code-performative-speech/</link>
      <pubDate>Fri, 23 Sep 2022 08:50:34 -0600</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/code-performative-speech/</guid>
      <description>Computer processing is the act by which the world of the computer is constructed. We can call it a world because it appears to exist unto itself, persisting its environment and taking scripted actions well outside of our awareness. Modern computers rarely shut off completely, so the illusion of persistence (&amp;ldquo;my user desktop is still there even when my computer is asleep; I just drop in on it now and then&amp;rdquo;) is not entirely an illusion.</description>
    </item>
    <item>
      <title>C#: Equality overrides, hash codes, and dictionaries</title>
      <link>http://isaaclyman.com/blog/posts/csharp-dictionary-hashcode/</link>
      <pubDate>Mon, 15 Aug 2022 14:22:14 -0600</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/csharp-dictionary-hashcode/</guid>
      <description>Consider the following C# class:&#xA;class StringEquivalent { private string Value { get; } public StringEquivalent(string value) { Value = value; } public override string ToString() { return Value; } public override bool Equals(object obj) { if (obj == null) { return false; } return obj.ToString() == Value; } public override int GetHashCode() { return Value.GetHashCode(); } } You provide a string when you instantiate it and you can compare it with another instance or a string using the Equals override (I&amp;rsquo;m using LINQPad&amp;rsquo;s Dump() method to test it):</description>
    </item>
    <item>
      <title>YAML Pipelines in Azure DevOps: tips and advice</title>
      <link>http://isaaclyman.com/blog/posts/ado-yaml-pipelines/</link>
      <pubDate>Mon, 09 May 2022 20:02:10 -0600</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/ado-yaml-pipelines/</guid>
      <description>Classic pipelines are out, YAML pipelines are in. Azure DevOps (ADO) has adopted a pipelines-as-code philosophy that will be their build and release strategy for the foreseeable future. There&amp;rsquo;s a lot to appreciate about the new pipelines, though they are a bit of a mental adjustment and the transition is anything but automatic&amp;mdash;I took a few weeks converting all of ours, though there were some special obstacles in our case that hopefully you won&amp;rsquo;t have to deal with.</description>
    </item>
    <item>
      <title>Lost AirPods, arrays, and sorting algorithms</title>
      <link>http://isaaclyman.com/blog/posts/sorting-algorithms/</link>
      <pubDate>Sat, 05 Mar 2022 20:09:03 -0700</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/sorting-algorithms/</guid>
      <description>The search for the lost AirPod My wife Dylan is a math and physics teacher. Yesterday while she was on a Zoom call with a student I got a text message from her: &amp;ldquo;the kids have my AirPods.&amp;rdquo; She knew because her student was cracking up laughing at the babblings of our toddlers, captured by the built-in microphone on the AirPods.&#xA;I tracked down the kids. They were carrying around an AirPod case with one AirPod in it.</description>
    </item>
    <item>
      <title>C#: IEnumerable, yield return, and lazy evaluation</title>
      <link>http://isaaclyman.com/blog/posts/csharp-ienumerable/</link>
      <pubDate>Mon, 22 Nov 2021 10:13:03 -0700</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/csharp-ienumerable/</guid>
      <description>Let&amp;rsquo;s talk about one of my favorite .NET features.&#xA;IEnumerable is an interface for iterating over a collection. In other words, if something is an IEnumerable, you can mostly think of it like an Array or a List. You can use a foreach statement to loop through it, you can use LINQ to map or reduce it in a hundred different ways, or you can explicitly cast it to an array with .</description>
    </item>
    <item>
      <title>Load testing with Jmeter: an introduction</title>
      <link>http://isaaclyman.com/blog/posts/load-testing-jmeter/</link>
      <pubDate>Tue, 11 Feb 2020 08:22:35 -0700</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/load-testing-jmeter/</guid>
      <description>Today we&amp;rsquo;re going to go from 0 to a configurable load testing script using JMeter, a free and popular load testing tool. We&amp;rsquo;ll be moving quickly, so hold on tight.&#xA;What is load testing? If your app or service is very successful, hundreds of people might be using it at once. Lots of things can go wrong when a server is under heavy usage like that. It&amp;rsquo;s not economical to recruit hundreds of actual people to test your app manually, so your best choice is to use software to simulate it.</description>
    </item>
    <item>
      <title>What to learn first</title>
      <link>http://isaaclyman.com/blog/posts/what-to-learn-first/</link>
      <pubDate>Wed, 13 Feb 2019 09:01:52 -0700</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/what-to-learn-first/</guid>
      <description>This is a chapter from Your First Year in Code, a book of practical how-to and advice for new developers. If you&amp;rsquo;re considering a career in software, check it out. It&amp;rsquo;s a free download at https://leanpub.com/firstyearincode.&#xA;I occasionally get a message from a brand-new developer who&amp;rsquo;s overwhelmed by all the technologies and choices that exist in the world of software development. Where do you even start? Some of these devs have seen job advertisements like the following:</description>
    </item>
    <item>
      <title>This is how HTTPS works</title>
      <link>http://isaaclyman.com/blog/posts/https/</link>
      <pubDate>Wed, 29 Aug 2018 07:00:45 -0600</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/https/</guid>
      <description>Most people are familiar with the http:// that begins web site URLs. And some may have noticed that any website with a login form or sensitive information starts with https:// instead. The &amp;ldquo;S&amp;rdquo; stands for &amp;ldquo;Secure,&amp;rdquo; and the algorithms that make it work are crazy and wonderful. To understand why HTTPS is so magical, let&amp;rsquo;s use an analogy.&#xA;Suppose you gather three accomplished programmers: Janice, Natalia, and Mario. These three have never met or communicated in any way.</description>
    </item>
    <item>
      <title>So you&#39;re stuck</title>
      <link>http://isaaclyman.com/blog/posts/stuck/</link>
      <pubDate>Tue, 20 Mar 2018 08:28:52 -0600</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/stuck/</guid>
      <description>This is a chapter from Your First Year in Code, a book of practical how-to and advice for new developers. If you&amp;rsquo;re considering a career in software, check it out. It&amp;rsquo;s a free download at https://leanpub.com/firstyearincode.&#xA;Part of a programmer&amp;rsquo;s job is chasing down missing semicolons and complex caching issues, scrutinizing and head-scratching over every line of code in an application. This is one of the most frustrating things about code: we use it to offload complexity from our brains, but the inverse of this benefit is that any useful program will be too complex for us to wrap our minds around completely.</description>
    </item>
    <item>
      <title>Application environments</title>
      <link>http://isaaclyman.com/blog/posts/application-environments/</link>
      <pubDate>Tue, 13 Mar 2018 16:17:12 -0600</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/application-environments/</guid>
      <description>What are environments, anyway? Most software companies have their product deployed to a few different environments, which have names like local, dev, test, stage, and production. On my first day as a developer I was confused about why there were so many steps between a developer&amp;rsquo;s computer and the app that customers used. It seemed inefficient and bureaucratic. I&amp;rsquo;ve come to appreciate those environments, though, and these days I break out in an ice-cold sweat if someone talks about deploying straight to production.</description>
    </item>
    <item>
      <title>Autosaving with Vuex</title>
      <link>http://isaaclyman.com/blog/posts/autosaving-with-vuex/</link>
      <pubDate>Mon, 26 Feb 2018 16:57:30 -0700</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/autosaving-with-vuex/</guid>
      <description>Some background Back in the early 2000s, if you&amp;rsquo;d been working on a Microsoft Word document and shut down your computer without hitting Ctrl+S, you were in a bad spot. All your work was gone and there was no way to get it back. In future versions of Word they introduced an autorecovery tool, which if you were lucky would offer to get most of it back for you. That was nice, but the real game changer was Google Docs, with its always-vigilant Saved indicator, noticing whenever you changed the document and saving it to the cloud automatically every couple of seconds.</description>
    </item>
    <item>
      <title>Privilege by mail</title>
      <link>http://isaaclyman.com/blog/posts/privilege-by-mail/</link>
      <pubDate>Mon, 18 Dec 2017 09:56:50 -0700</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/privilege-by-mail/</guid>
      <description>Leer en español&#xA;I feel very privileged to lead the life I lead. I live in a good neighborhood. I can change jobs if I don&amp;rsquo;t like the one I have. I haven&amp;rsquo;t worried about how to pay for groceries since 2013. If I were to list all my blessings, I could go on forever&amp;mdash;but in short, I lead a far better life than I deserve and I&amp;rsquo;m anything but self-made.</description>
    </item>
    <item>
      <title>Lyman&#39;s Law</title>
      <link>http://isaaclyman.com/blog/posts/lymans-law/</link>
      <pubDate>Sat, 19 Aug 2017 06:54:57 -0600</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/lymans-law/</guid>
      <description>A pretty-darned-optional part of being a software developer is getting a generally-applicable principle (a &amp;ldquo;law&amp;rdquo;) named after yourself. Most of the time, it seems, this happens unintentionally&amp;ndash;the law&amp;rsquo;s originator doesn&amp;rsquo;t necessarily foresee it becoming a pithy and oft-repeated internet adage. But if I could choose a principle to call &amp;ldquo;Lyman&amp;rsquo;s Law,&amp;rdquo; I think it might be this one:&#xA;Code accompanied by unit tests will have a higher standard of code quality than code written without unit tests, even if the unit tests themselves are not taken into account.</description>
    </item>
    <item>
      <title>Steps to better code</title>
      <link>http://isaaclyman.com/blog/posts/steps-to-better-code/</link>
      <pubDate>Fri, 28 Jul 2017 14:01:53 -0600</pubDate><author>map[host:isaaclyman.com username:blog] (Isaac Lyman)</author>
      <guid>http://isaaclyman.com/blog/posts/steps-to-better-code/</guid>
      <description>This is a chapter from Your First Year in Code, a book of practical how-to and advice for new developers. If you&amp;rsquo;re considering a career in software, check it out. It&amp;rsquo;s a free download at https://leanpub.com/firstyearincode.&#xA;When you start out coding, you usually spend a year or two completely oblivious to the rules of “good code.” You may hear words like “elegant” or “clean” tossed around, but you can’t define them.</description>
    </item>
  </channel>
</rss>
