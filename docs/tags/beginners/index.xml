<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Beginners on Minimum Viable Blog</title>
    <link>http://isaaclyman.com/blog/tags/beginners/</link>
    <description>Recent content in Beginners on Minimum Viable Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>© 2017 by Isaac Lyman. Site powered by Hugo and GitHub.</copyright>
    <lastBuildDate>Wed, 13 Feb 2019 09:01:52 -0700</lastBuildDate>
    
	<atom:link href="http://isaaclyman.com/blog/tags/beginners/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What to learn first</title>
      <link>http://isaaclyman.com/blog/posts/what-to-learn-first/</link>
      <pubDate>Wed, 13 Feb 2019 09:01:52 -0700</pubDate>
      
      <guid>http://isaaclyman.com/blog/posts/what-to-learn-first/</guid>
      <description>I occasionally get a message from a brand-new developer who&amp;rsquo;s overwhelmed by all the technologies and choices that exist in the world of software development. Where do you even start? Some of these devs have seen job advertisements like the following:
 This is for a standard, mid-level web development position. It lists 14 specific technologies, alludes to many more, and if that weren&amp;rsquo;t enough, it has an &amp;ldquo;etc.&amp;rdquo; Even as a senior software engineer at a billion-dollar company, I&amp;rsquo;m not sure what that &amp;ldquo;etc.</description>
    </item>
    
    <item>
      <title>This is how HTTPS works</title>
      <link>http://isaaclyman.com/blog/posts/https/</link>
      <pubDate>Wed, 29 Aug 2018 07:00:45 -0600</pubDate>
      
      <guid>http://isaaclyman.com/blog/posts/https/</guid>
      <description>Most people are familiar with the http:// that begins web site URLs. And some may have noticed that any website with a login form or sensitive information starts with https:// instead. The &amp;ldquo;S&amp;rdquo; stands for &amp;ldquo;Secure,&amp;rdquo; and the algorithms that make it work are crazy and wonderful. To understand why HTTPS is so magical, let&amp;rsquo;s use an analogy.
Suppose you gather three accomplished programmers: Janice, Natalia, and Mario. These three have never met or communicated in any way.</description>
    </item>
    
    <item>
      <title>So you&#39;re stuck</title>
      <link>http://isaaclyman.com/blog/posts/stuck/</link>
      <pubDate>Tue, 20 Mar 2018 08:28:52 -0600</pubDate>
      
      <guid>http://isaaclyman.com/blog/posts/stuck/</guid>
      <description>Part of a programmer&amp;rsquo;s job is chasing down missing semicolons and complex caching issues, scrutinizing and head-scratching over every line of code in an application. This is one of the most frustrating things about code: we use it to offload complexity from our brains, but the inverse of this benefit is that any useful program will be too complex for us to wrap our minds around completely. Complexity creates unknowns, and every unknown is a bug waiting to happen.</description>
    </item>
    
    <item>
      <title>Privilege by mail</title>
      <link>http://isaaclyman.com/blog/posts/privilege-by-mail/</link>
      <pubDate>Mon, 18 Dec 2017 09:56:50 -0700</pubDate>
      
      <guid>http://isaaclyman.com/blog/posts/privilege-by-mail/</guid>
      <description>Leer en español
I feel very privileged to lead the life I lead. I live in a good neighborhood. I can change jobs if I don&amp;rsquo;t like the one I have. I haven&amp;rsquo;t worried about how to pay for groceries since 2013. If I were to list all my blessings, I could go on forever&amp;mdash;but in short, I lead a far better life than I deserve and I&amp;rsquo;m anything but self-made.</description>
    </item>
    
    <item>
      <title>Steps to better code</title>
      <link>http://isaaclyman.com/blog/posts/steps-to-better-code/</link>
      <pubDate>Fri, 28 Jul 2017 14:01:53 -0600</pubDate>
      
      <guid>http://isaaclyman.com/blog/posts/steps-to-better-code/</guid>
      <description>When you start out coding, you usually spend a year or two completely oblivious to the rules of “good code.” You may hear words like “elegant” or “clean” tossed around, but you can’t define them. That’s okay. For a programmer without any experience, there’s only one metric worth keeping tabs on: does it work?
Soon, though, you’ll need to raise your expectations. Good code doesn’t just work. It’s simple, modular, testable, maintainable, thoughtful.</description>
    </item>
    
  </channel>
</rss>