<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>csharp on Minimum Viable Blog</title>
    <link>http://isaaclyman.com/blog/tags/csharp/</link>
    <description>Recent content in csharp on Minimum Viable Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Â© 2017 by Isaac Lyman. Site powered by Hugo and GitHub Pages.</copyright>
    <lastBuildDate>Mon, 15 Aug 2022 14:22:14 -0600</lastBuildDate><atom:link href="http://isaaclyman.com/blog/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C#: Equality overrides, hash codes, and dictionaries</title>
      <link>http://isaaclyman.com/blog/posts/csharp-dictionary-hashcode/</link>
      <pubDate>Mon, 15 Aug 2022 14:22:14 -0600</pubDate>
      
      <guid>http://isaaclyman.com/blog/posts/csharp-dictionary-hashcode/</guid>
      <description>Consider the following C# class:
class StringEquivalent { private string Value { get; } public StringEquivalent(string value) { Value = value; } public override string ToString() { return Value; } public override bool Equals(object obj) { if (obj == null) { return false; } return obj.ToString() == Value; } public override int GetHashCode() { return Value.GetHashCode(); } } You provide a string when you instantiate it and you can compare it with another instance or a string using the Equals override (I&amp;rsquo;m using LINQPad&amp;rsquo;s Dump() method to test it):</description>
    </item>
    
    <item>
      <title>C#: IEnumerable, yield return, and lazy evaluation</title>
      <link>http://isaaclyman.com/blog/posts/csharp-ienumerable/</link>
      <pubDate>Mon, 22 Nov 2021 10:13:03 -0700</pubDate>
      
      <guid>http://isaaclyman.com/blog/posts/csharp-ienumerable/</guid>
      <description>Let&amp;rsquo;s talk about one of my favorite .NET features.
IEnumerable is an interface for iterating over a collection. In other words, if something is an IEnumerable, you can mostly think of it like an Array or a List. You can use a foreach statement to loop through it, you can use LINQ to map or reduce it in a hundred different ways, or you can explicitly cast it to an array with .</description>
    </item>
    
  </channel>
</rss>
